import java.util.*;

public class Gen {
public static LinkedList<Instr> code =
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Quote(new IntV(1)),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(0)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Eq),
LLE.add_elem(new Branch(
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Quote(new IntV(8)),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(3)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Mult),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(100)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Gt),
LLE.add_elem(new Return(),LLE.empty())))))))))))),
LLE.add_elem(new Quote(new BoolV(false)),
LLE.add_elem(new Return(),LLE.empty()))),
LLE.add_elem(new Branch(
LLE.add_elem(new Quote(new BoolV(true)),
LLE.add_elem(new Return(),LLE.empty())),
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Quote(new IntV(3)),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(2)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Add),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(5)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Mult),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(8)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Add),
LLE.add_elem(new Swap(),
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Push(),
LLE.add_elem(new Quote(new IntV(6)),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(6)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Mult),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(6)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Sub),
LLE.add_elem(new Swap(),
LLE.add_elem(new Quote(new IntV(3)),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Add),
LLE.add_elem(new Cons(),
LLE.add_elem(new BinOp(BinOp.operateur.Eq),
LLE.add_elem(new Return(),LLE.empty())))))))))))))))))))))))))))))))))))))),LLE.empty()))))))))));
}
